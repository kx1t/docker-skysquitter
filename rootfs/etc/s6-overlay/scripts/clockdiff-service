#!/command/with-contenv bash
#shellcheck shell=bash disable=SC2015,SC1091

# -----------------------------------------------------------------------------------
# Copyright 2022, 2023 by Ramon F. Kolb, kx1t - licensed under the terms and conditions
# of the MIT License. The terms and conditions of this license are included with the Github
# distribution of this package, and are also available here:
# https://github.com/kx1t/docker-skysquitter/

# redirect stderr to stdout so it's picked up in the docker logs
exec 2>&1
# all errors will show a line number and the command used to produce the error
# SCRIPT_PATH="$( cd -- "$(dirname "$0")" >/dev/null 2>&1 ; pwd)/$(basename "$0")"
# trap 'echo -e "[ERROR] $SCRIPT_PATH in line $LINENO when executing: $BASH_COMMAND"' ERR

APPNAME="$(hostname)/clockdiff-service"
SLEEPTIME="60s"
RUNFILE="/run/clockdiff.status"

# load common functions
source /scripts/common
# preconfige s6wrap with some args:
s6wrap=(s6wrap --quiet --timestamps --prepend="${APPNAME}" --args)

# parse NTP_REFSERVER array and add DEST_HOST as last resort fallback:
readarray -d "," -t ntparray <<< "$NTP_REFSERVER"
ntparray+=("${DEST_HOST}")
ntpindex=0

chk_enabled "$VERBOSELOGS" && "${s6wrap[@]}" echo "Started as an s6 service; logging is verbose" || "${s6wrap[@]}" echo "Started as an s6 service; logging is non-verbose"
chk_enabled "$VERBOSELOGS" &&  LOGINTERVAL=600 || LOGINTERVAL=3600

lastlog=$(($(date +%s) - LOGINTERVAL - 1))

echo "$(date +%s)000,99999,99999,\"clockdiff not yet available\"" > "${RUNFILE}"

while true
do
    lastchecked="$(date +%s)000"

    # dont quote ${ntparray[$ntpindex]} below because clockdiff
    # will think it's always a hostname and fail on resolving IP addresses
    #shellcheck disable=SC2086
    timediff="$(clockdiff ${ntparray[$ntpindex]} 2>&1)" || true

    # capture a few fatal errors
    if grep -i "command not found" <<< "${timediff}" >/dev/null 2>&1; then
        echo "${lastchecked},99999,99999,\"clockdiff cmd not installed\"" > "${RUNFILE}"
        "${s6wrap[@]}" echo "FATAL: Stopped clockdiff-server: clockdiff not installed"
        sleep infinity
    fi
    if grep -i "nice: Operation not permitted" <<< "${timediff}" >/dev/null 2>&1; then
        echo "${lastchecked},99999,99999,\"NICE capability not available in container\"" > "${RUNFILE}"
        "${s6wrap[@]}" echo "FATAL: topped clockdiff-server: NICE capability not available in container"
        sleep infinity
    fi

    # capture a few temporary errors; generally we'll cycle to the next NTP_REFSERVER and try again:
    if grep -i "Name or service not known" <<< "${timediff}" >/dev/null 2>&1; then
        echo "${lastchecked},99999,99999,\"Cannot resolve NTP server ${ntparray[$ntpindex]}\"" > "${RUNFILE}"
        "${s6wrap[@]}" echo -n "WARNING: Temporary issue resolving NTP server ${ntparray[$ntpindex]}; cycling to NTP server: "
        (( ntpindex++ ))
        (( ntpindex >= ${#ntparray[@]} )) && ntpindex=0 || true
        echo "${ntparray[$ntpindex]}"
        lastlog=$(($(date +%s) - LOGINTERVAL - 1))
        continue
    fi
    # sometimes the service is down
    if grep -i "is down" <<< "${timediff}" >/dev/null 2>&1; then
        "${s6wrap[@]}" echo -n "WARNING: Temporary issue connecting to NTP server ${ntparray[$ntpindex]} (reported down); cycling to NTP server: "
        (( ntpindex++ ))
        (( ntpindex >= ${#ntparray[@]} )) && ntpindex=0 || true
        echo "${ntparray[$ntpindex]}"
        lastlog=$(($(date +%s) - LOGINTERVAL - 1))
        continue
    fi

    # last check if at least the first field is a digit string
    x="$(awk '{print $1}' <<< "${timediff}")"
    if [ -z "${x##*[!0-9]*}" ]; then
        echo "${lastchecked},99999,99999,\"Error: ${timediff}\"" > "${RUNFILE}"
        "${s6wrap[@]}" echo -n "Error: ${timediff}; cycling to NTP server: "
        (( ntpindex++ ))
        (( ntpindex >= ${#ntparray[@]} )) && ntpindex=0 || true
        echo "${ntparray[$ntpindex]}"
        lastlog=$(($(date +%s) - LOGINTERVAL - 1))
        continue
    fi

    # if we are here, then we can print the clockdiff values
    printf "%s000,%s,%s,\"\"\n" "$(awk '{print $1}' <<< "${timediff}")" "$(awk '{print $2}' <<< "${timediff}")" "$(awk '{print $3}' <<< "${timediff}")" > "${RUNFILE}"
    # Be less verbose in logging
    if (( lastlog + LOGINTERVAL < $(date +%s) )); then
        "${s6wrap[@]}" echo "Clock drift for ${ntparray[$ntpindex]}: $(awk '{print $2}' <<< "${timediff}") msec/$(awk '{print $3}' <<< "${timediff}") msec"
        lastlog="$(date +%s)"
    fi
    sleep $SLEEPTIME
done
